package com.fit2081.ter_34857613.NutriTrack.ui.screens

import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardActions
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Search
import androidx.compose.material.icons.filled.Info
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.runtime.livedata.observeAsState
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.platform.LocalFocusManager
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.ImeAction
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.lifecycle.viewmodel.compose.viewModel
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.fit2081.ter_34857613.NutriTrack.AppScreen
import com.fit2081.ter_34857613.NutriTrack.R
import com.fit2081.ter_34857613.NutriTrack.model.data.Fruit
import com.fit2081.ter_34857613.NutriTrack.ui.theme.Green40
import com.fit2081.ter_34857613.NutriTrack.ui.theme.GreenGrey40
import com.fit2081.ter_34857613.NutriTrack.ui.theme.LightGreen40
import com.fit2081.ter_34857613.NutriTrack.viewmodel.NutriCoachViewModel
import com.fit2081.ter_34857613.NutriTrack.utils.LocalAppLocale
import kotlinx.coroutines.launch

/**
 * Composable function for the NutriCoach screen.
 *
 * This screen provides two main functionalities:
 * 1.  **Fruit Information Search**: Allows users to search for fruits and view their nutritional details.
 *     This feature is prominently displayed if the user's fruit intake score (from a questionnaire,
 *     presumably) is not optimal.
 * 2.  **AI-Powered Nutrition Tips (GenAI Tip Section)**: Displays a daily nutrition tip generated by an AI.
 *     Users can request new tips and view a history of previously generated and saved tips.
 *
 * The screen utilizes a [NutriCoachViewModel] to handle data fetching (fruit search, tip generation),
 * state management (loading indicators, error messages, search text, current tip), and interactions
 * with backend services or local data sources.
 * It adapts to language changes using [LocalAppLocale] and ensures UI elements are updated accordingly.
 *
 * @param userId The unique identifier of the currently logged-in user, used for fetching user-specific
 *               data like saved tips and fruit score.
 * @param onNavigate Callback function to navigate to other [AppScreen]s (not actively used in this screen's
 *                   current implementation but available for future use).
 * @param viewModel The [NutriCoachViewModel] instance for this screen.
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun NutriCoachScreen(
    userId: String,
    onNavigate: (AppScreen) -> Unit = {},
    viewModel: NutriCoachViewModel = viewModel()
) {
    val coroutineScope = rememberCoroutineScope()
    val scrollState = rememberScrollState()
    val focusManager = LocalFocusManager.current
    val context = LocalContext.current
    
    // Track the current locale to detect language changes
    val currentLocale = LocalAppLocale.current
    
    // Effect that runs when locale changes
    LaunchedEffect(currentLocale) {
        viewModel.onLanguageChanged(context)
    }

    // State for fruit search
    var fruitSearchText by remember { mutableStateOf("") }
    var isFruitScoreOptimal by remember { mutableStateOf(false) }

    // State for GenAI section
    val currentTipFromViewModel by viewModel.currentTip.observeAsState("")
    var currentTip by remember { mutableStateOf("") }
    val isTipGenerating by viewModel.isTipGenerating.observeAsState(false)
    val savedTips = viewModel.getTipsByUserId(userId).observeAsState(emptyList())
    var showTipsHistory by remember { mutableStateOf(false) }

    // Observe search results from the ViewModel
    val searchResultFruit by viewModel.searchResultFruit.observeAsState()
    val errorMessage by viewModel.errorMessage.observeAsState()
    val isLoading by viewModel.isLoading.observeAsState(false)
    
    // Force recomposition when language changes
    val forceRecompose = viewModel.languageChanged.value

    // Main content
    val preventNavigation = remember { mutableStateOf(false) }
    
    // Handle search function in one place to avoid duplication
    val handleSearch = {
        if (fruitSearchText.isNotBlank()) {
            preventNavigation.value = true
            viewModel.searchFruit(fruitSearchText)
            focusManager.clearFocus()
        }
    }
    
    // Capture navigation events if needed
    LaunchedEffect(preventNavigation.value) {
        if (preventNavigation.value) {
            // Reset after a brief delay
            kotlinx.coroutines.delay(100)
            preventNavigation.value = false
        }
    }

    // Load user's fruit score and current tip on init
    LaunchedEffect(userId) {
        isFruitScoreOptimal = viewModel.isFruitScoreOptimal(userId)
        // Initialize with a random tip if we have any
        if (savedTips.value.isNotEmpty()) {
            currentTip = savedTips.value.first().content
        }
    }
    
    // Update currentTip whenever ViewModel value changes
    LaunchedEffect(currentTipFromViewModel) {
        if (currentTipFromViewModel.isNotEmpty()) {
            currentTip = currentTipFromViewModel
        }
    }

    Scaffold(
        // Reduce padding between status bar and content
        contentWindowInsets = WindowInsets(0, 0, 0, 0),
        topBar = {
            TopAppBar(
                title = {
                    Text(
                        text = stringResource(R.string.nutricoach_title),
                        style = MaterialTheme.typography.headlineMedium.copy(
                            color = Green40,
                            fontWeight = FontWeight.Bold
                        ),
                        // Add minimal vertical padding to the text
                        modifier = Modifier.padding(vertical = 2.dp)
                    )
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.background
                ),
                // Set minimal insets for the TopAppBar
                windowInsets = WindowInsets(0, 0, 0, 0),
                // Reduce overall TopAppBar height
                modifier = Modifier.height(48.dp)
            )
        }
    ) { paddingValues ->
        // Main content
        Box(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .verticalScroll(scrollState)
                .padding(horizontal = 6.dp)
        ) {
            Column(modifier = Modifier.fillMaxWidth()) {
                // Fruits section (top 50%)
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surface
                    )
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp)
                    ) {
                        if (!isFruitScoreOptimal) {
                            // Search box with container to handle keyboard events
                            Box(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    // This ensures the box handles its own input events
                                    .defaultMinSize(minHeight = 56.dp)
                            ) {
                                OutlinedTextField(
                                    value = fruitSearchText,
                                    onValueChange = { fruitSearchText = it },
                                    modifier = Modifier.fillMaxWidth(),
                                    label = { Text(stringResource(R.string.enter_fruit_name)) },
                                    leadingIcon = {
                                        IconButton(
                                            onClick = handleSearch
                                        ) {
                                            Icon(
                                                Icons.Default.Search,
                                                contentDescription = stringResource(R.string.search),
                                                tint = Green40
                                            )
                                        }
                                    },
                                    colors = OutlinedTextFieldDefaults.colors(
                                        focusedBorderColor = Green40,
                                        unfocusedBorderColor = GreenGrey40
                                    ),
                                    keyboardOptions = KeyboardOptions(imeAction = ImeAction.Search),
                                    keyboardActions = KeyboardActions(
                                        onSearch = {
                                            handleSearch()
                                            // Explicitly preventing the default action
                                            // by consuming the event here
                                        }
                                    ),
                                    singleLine = true
                                )
                            }

                            Spacer(modifier = Modifier.height(8.dp))

                            if (isLoading) {
                                CircularProgressIndicator(
                                    modifier = Modifier.align(Alignment.CenterHorizontally),
                                    color = Green40
                                )
                            } else if (errorMessage != null) {
                                // Show error message
                                Box(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .clip(RoundedCornerShape(8.dp))
                                        .background(Color.Red.copy(alpha = 0.1f))
                                        .padding(16.dp),
                                    contentAlignment = Alignment.Center
                                ) {
                                    Column(
                                        horizontalAlignment = Alignment.CenterHorizontally
                                    ) {
                                        // Store errorMessage in a local non-nullable variable
                                        val errorMsg = errorMessage.orEmpty()
                                        
                                        if (errorMsg.contains("internet connection") || 
                                            errorMsg.contains("check your internet")) {
                                            Text(
                                                text = stringResource(R.string.network_error),
                                                textAlign = TextAlign.Center,
                                                color = Color.Red,
                                                fontWeight = FontWeight.Bold,
                                                style = MaterialTheme.typography.titleMedium,
                                                modifier = Modifier.padding(bottom = 8.dp)
                                            )
                                        }
                                        
                                        Text(
                                            text = errorMsg,
                                            textAlign = TextAlign.Center,
                                            color = Color.Red,
                                            style = MaterialTheme.typography.bodyMedium
                                        )
                                    }
                                }
                                
                                // Button to try again
                                TextButton(
                                    onClick = { viewModel.clearSearch() },
                                    modifier = Modifier.align(Alignment.End)
                                ) {
                                    Text(stringResource(R.string.try_again), color = Green40)
                                }
                            } else if (searchResultFruit != null) {
                                // Display fruit information
                                FruitInfoCard(searchResultFruit!!)
                            } else {
                                // Placeholder when no search is performed yet
                                Box(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(180.dp)
                                        .clip(RoundedCornerShape(8.dp))
                                        .background(Color.LightGray.copy(alpha = 0.5f))
                                        .padding(16.dp),
                                    contentAlignment = Alignment.Center
                                ) {
                                    Text(
                                        text = stringResource(R.string.search_fruit_placeholder),
                                        textAlign = TextAlign.Center,
                                        color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f)
                                    )
                                }
                            }
                        } else {
                            // For users with optimal fruit score, show congratulation text and a random image
                            Column(
                                horizontalAlignment = Alignment.CenterHorizontally,
                                modifier = Modifier.fillMaxWidth()
                            ) {
                                Text(
                                    text = stringResource(R.string.optimal_fruit_congrats),
                                    style = MaterialTheme.typography.titleMedium.copy(
                                        fontWeight = FontWeight.Bold,
                                        color = Green40
                                    ),
                                    modifier = Modifier.padding(bottom = 16.dp)
                                )
                                
                                // Generate a random seed for the image to ensure it changes
                                val randomSeed = remember { (1..1000).random() }
                                
                                // Display a random beautiful nature image from Picsum Photos
                                Card(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .height(220.dp)
                                        .clip(RoundedCornerShape(12.dp)),
                                    elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
                                ) {
                                    AsyncImage(
                                        model = ImageRequest.Builder(LocalContext.current)
                                            .data("https://picsum.photos/seed/$randomSeed/800/600")
                                            .crossfade(true)
                                            .build(),
                                        contentDescription = "Random Beautiful Image",
                                        contentScale = ContentScale.Crop,
                                        modifier = Modifier.fillMaxSize()
                                    )
                                }
                                
                                Text(
                                    text = stringResource(R.string.optimal_fruit_continue),
                                    style = MaterialTheme.typography.bodyMedium,
                                    textAlign = TextAlign.Center,
                                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                                    modifier = Modifier.padding(top = 16.dp)
                                )
                            }
                        }
                    }
                }

                Spacer(modifier = Modifier.height(16.dp))

                // GenAI Tips Section (bottom 50%)
                Card(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(vertical = 8.dp),
                    elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surface
                    )
                ) {
                    Column(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(16.dp)
                    ) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            modifier = Modifier.fillMaxWidth()
                        ) {
                            Text(
                                text = stringResource(R.string.ai_nutrition_tips),
                                style = MaterialTheme.typography.titleLarge.copy(
                                    color = Green40,
                                    fontWeight = FontWeight.Bold
                                ),
                                modifier = Modifier.weight(1f)
                            )
                            
                            IconButton(onClick = { showTipsHistory = true }) {
                                Icon(
                                    Icons.Default.Info,
                                    contentDescription = stringResource(R.string.view_tips_history),
                                    tint = Green40
                                )
                            }
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        // Current tip display
                        Box(
                            modifier = Modifier
                                .fillMaxWidth()
                                .clip(RoundedCornerShape(8.dp))
                                .background(Color.LightGray.copy(alpha = 0.5f))
                                .padding(16.dp),
                            contentAlignment = Alignment.Center
                        ) {
                            if (currentTip.isNotBlank()) {
                                if (currentTip.contains("No internet connection") || 
                                    currentTip.contains("check your internet")) {
                                    Column(
                                        horizontalAlignment = Alignment.CenterHorizontally,
                                        modifier = Modifier.fillMaxWidth()
                                    ) {
                                        Text(
                                            text = stringResource(R.string.network_error),
                                            textAlign = TextAlign.Center,
                                            color = Color.Red,
                                            fontWeight = FontWeight.Bold,
                                            style = MaterialTheme.typography.titleMedium,
                                            modifier = Modifier.padding(bottom = 8.dp)
                                        )
                                        
                                        Text(
                                            text = currentTip,
                                            textAlign = TextAlign.Center,
                                            style = MaterialTheme.typography.bodyLarge,
                                            color = Color.Red.copy(alpha = 0.8f),
                                            modifier = Modifier.fillMaxWidth()
                                        )
                                    }
                                } else {
                                    Text(
                                        text = currentTip,
                                        style = MaterialTheme.typography.bodyLarge,
                                        modifier = Modifier.fillMaxWidth()
                                    )
                                }
                            } else {
                                Text(
                                    text = stringResource(R.string.generate_tip_placeholder),
                                    textAlign = TextAlign.Center,
                                    style = MaterialTheme.typography.bodyLarge,
                                    color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.7f),
                                    modifier = Modifier.fillMaxWidth()
                                )
                            }
                        }

                        Spacer(modifier = Modifier.height(16.dp))

                        // Generate new tip button
                        Button(
                            onClick = {
                                viewModel.generateNutritionTip(userId)
                            },
                            modifier = Modifier.fillMaxWidth(),
                            enabled = !isTipGenerating,
                            colors = ButtonDefaults.buttonColors(
                                containerColor = Green40,
                                contentColor = Color.White
                            )
                        ) {
                            if (isTipGenerating) {
                                CircularProgressIndicator(
                                    modifier = Modifier.size(24.dp),
                                    color = Color.White,
                                    strokeWidth = 2.dp
                                )
                            } else {
                                Text(stringResource(R.string.generate_new_tip))
                            }
                        }
                    }
                }

                // Add some spacing at the bottom for better scrolling experience
                Spacer(modifier = Modifier.height(16.dp))
            }
        }
    }

    // Tips History Dialog
    if (showTipsHistory) {
        // Map to store translations, keyed by tip ID
        val translations = remember { mutableStateMapOf<Long, String>() }
        
        // Effect to translate tips when language changes
        LaunchedEffect(savedTips.value, currentLocale) {
            val currentLanguage = currentLocale.language
            if (currentLanguage != "en" && savedTips.value.isNotEmpty()) {
                // Translate each tip in parallel
                savedTips.value.forEach { tip ->
                    launch {
                        viewModel.translateText(tip.content, currentLanguage).onSuccess { translatedContent ->
                            // Store the translation in our map
                            translations[tip.id] = translatedContent
                        }
                    }
                }
            }
        }
        
        AlertDialog(
            onDismissRequest = { showTipsHistory = false },
            title = {
                Text(
                    text = stringResource(R.string.tips_history_title),
                    style = MaterialTheme.typography.titleLarge.copy(
                        color = Green40,
                        fontWeight = FontWeight.Bold
                    )
                )
            },
            text = {
                if (savedTips.value.isEmpty()) {
                    Text(
                        text = stringResource(R.string.no_tips_saved),
                        style = MaterialTheme.typography.bodyMedium
                    )
                } else {
                    LazyColumn(
                        modifier = Modifier.heightIn(max = 400.dp)
                    ) {
                        items(savedTips.value.size) { index ->
                            val tip = savedTips.value[index]
                            val currentLanguage = currentLocale.language
                            // Use the translated content if available, otherwise fall back to original
                            val displayContent = if (currentLanguage != "en" && translations.containsKey(tip.id)) {
                                translations[tip.id]!!
                            } else {
                                tip.content
                            }
                            
                            Card(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .padding(vertical = 4.dp),
                                elevation = CardDefaults.cardElevation(defaultElevation = 2.dp)
                            ) {
                                Column(
                                    modifier = Modifier
                                        .fillMaxWidth()
                                        .padding(16.dp)
                                ) {
                                    Text(
                                        text = displayContent,
                                        style = MaterialTheme.typography.bodyMedium
                                    )

                                    Spacer(modifier = Modifier.height(4.dp))

                                    Text(
                                        text = stringResource(R.string.category_label, tip.category),
                                        style = MaterialTheme.typography.bodySmall.copy(
                                            color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f)
                                        )
                                    )
                                }
                            }
                        }
                    }
                }
            },
            confirmButton = {
                TextButton(
                    onClick = { showTipsHistory = false },
                    colors = ButtonDefaults.textButtonColors(
                        contentColor = Green40
                    )
                ) {
                    Text(stringResource(R.string.close))
                }
            }
        )
    }
}

/**
 * Composable function to display information about a specific [Fruit].
 *
 * This card shows the fruit's name, an image (loaded via Coil), and its nutritional information
 * (calories, fat, sugar, carbohydrates, protein). It includes a title and a well-structured layout
 * for presenting these details. If the fruit image URL is invalid or an image fails to load,
 * a placeholder or error indicator might be shown by the `AsyncImage` component.
 *
 * @param fruit The [Fruit] object containing the details to be displayed.
 */
@Composable
fun FruitInfoCard(fruit: Fruit) {
    val context = LocalContext.current
    
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 2.dp),
        colors = CardDefaults.cardColors(
            containerColor = MaterialTheme.colorScheme.surface
        )
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp)
        ) {
            // Fruit name and taxonomy
            Text(
                text = fruit.name,
                style = MaterialTheme.typography.titleMedium.copy(
                    fontWeight = FontWeight.Bold
                ),
                modifier = Modifier.padding(bottom = 8.dp)
            )
            
            Text(
                text = stringResource(R.string.fruit_family, fruit.family, fruit.genus),
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurface.copy(alpha = 0.6f),
                modifier = Modifier.padding(bottom = 8.dp)
            )
            
            HorizontalDivider(color = LightGreen40, thickness = 1.dp)
            
            Spacer(modifier = Modifier.height(8.dp))
            
            // Nutrition facts table
            Column(modifier = Modifier.fillMaxWidth()) {
                NutritionRow(stringResource(R.string.nutrition_calories), stringResource(R.string.calories_unit, fruit.nutritions.calories.toString()))
                HorizontalDivider(color = LightGreen40.copy(alpha = 0.3f), thickness = 0.5.dp)
                NutritionRow(stringResource(R.string.nutrition_carbs), stringResource(R.string.grams_unit, fruit.nutritions.carbohydrates.toString()))
                HorizontalDivider(color = LightGreen40.copy(alpha = 0.3f), thickness = 0.5.dp)
                NutritionRow(stringResource(R.string.nutrition_fiber), stringResource(R.string.grams_unit, fruit.nutritions.fiber.toString()))
                HorizontalDivider(color = LightGreen40.copy(alpha = 0.3f), thickness = 0.5.dp)
                NutritionRow(stringResource(R.string.nutrition_sugar), stringResource(R.string.grams_unit, fruit.nutritions.sugar.toString()))
                HorizontalDivider(color = LightGreen40.copy(alpha = 0.3f), thickness = 0.5.dp)
                NutritionRow(stringResource(R.string.nutrition_protein), stringResource(R.string.grams_unit, fruit.nutritions.protein.toString()))
                HorizontalDivider(color = LightGreen40.copy(alpha = 0.3f), thickness = 0.5.dp)
                NutritionRow(stringResource(R.string.nutrition_fat), stringResource(R.string.grams_unit, fruit.nutritions.fat.toString()))
            }
        }
    }
}

@Composable
fun NutritionRow(label: String, value: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 4.dp),
        horizontalArrangement = Arrangement.SpaceBetween
    ) {
        Text(
            text = label,
            style = MaterialTheme.typography.bodyMedium
        )
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium.copy(
                fontWeight = FontWeight.Bold
            )
        )
    }
}
